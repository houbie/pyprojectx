[project]
name = "pyprojectx"
version = "1.0.0.dev"
description = "Execute scripts from pyproject.toml, installing tools on-the-fly"
license = { text = "MIT" }
authors = [{ name = "Houbie", email = "ivo@houbrechts-it.be" }]
readme = "README.md"
urls = { homepage = "https://github.com/pyprojectx/pyprojectx", documentation = "https://pyprojectx.github.io" }

keywords = ["build", "dependency", "pyprojectx"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.8"

dependencies = [
    "click==8.1.3",
    "distlib==0.3.6",
    "filelock==3.11.0",
    "platformdirs==3.2.0",
    "tomli==2.0.1",
    "userpath==1.8.0",
    "virtualenv==20.23.0",
]

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.3.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
pyprojectx = "pyprojectx.cli:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
select = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "ICN", "INP", "ISC", "NPY", "PD", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "ICN", "INP", "ISC", "NPY", "PD", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
ignore = ["D100", "D102", "D103", "D104", "D105", "D213", "D203", "T201", "TRY003", "EM102", "COM812", "S602", "S603", "S604", "S605", "S607"]
[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "I001"]

[tool.pyprojectx]
pdm = { requirements = ["pdm==2.7.4", "requests<2.30.0"], post-install = "pw@pre-commit install" }
black = "black==23.9.1"
ruff = "ruff==0.0.291"
pre-commit = "pre-commit"
mkdocs = ["mkdocs ~=1.4", "mkdocs-material ~=9.1", "mkdocstrings[python] ~=0.21", "markdown-include ~=0.8", ]

[tool.pyprojectx.aliases]
install = "pdm install"
run = "pdm run pyprojectx -t pyproject.toml "
update = "pdm update"
outdated = "pdm update --outdated"
clean = "rm -r .venv .pytest_cache dist"
clean-all = """\
pw@clean
rm -r .pyprojectx"""
ruff = "ruff src tests --fix"
black = "black src tests"
unit-test = "pdm run pytest tests/unit"
integration-test = "pdm run pytest tests/integration"
test = [
    "pw@unit-test",
    "pw@integration-test"
]
check-ruff = "ruff src tests"
check-black = "black src tests --check"
check = [
    "pw@check-black",
    "pw@check-ruff",
    "pw@test"
]
build = [
    "pw@install",
    "pw@check",
    "pw@pdm build"
]

# used in github actions:
publish = "pdm publish --username __token__"
prep-release = """\
# cleanup
rm -f wrappers.zip .changelog.md
# extract version from tag
RELEASE_VERSION="${GITHUB_REF_NAME}"
# replace __version__ in wrapper
sed -i -e "s/__version__/${RELEASE_VERSION}/g" src/pyprojectx/wrapper/pw.py
sed -i -e "s/1.0.0.dev/${RELEASE_VERSION}/g" pyproject.toml
# cleanup sed backup
rm -r src/pyprojectx/wrapper/pw.py?*
rm -r pyproject.toml?*
mkdir -p dist-zip
cp src/pyprojectx/wrapper/pw.py dist-zip/pw
cp src/pyprojectx/wrapper/pw.bat dist-zip/pw.bat
zip -j wrappers.zip dist-zip/pw*
awk '/-{3,}/{flag=1;next}/Release/{if (flag==1)exit}flag' CHANGELOG.md > .changelog.md
"""

generate-usage = "pw@ --help > docs/docs/usage.txt"
serve-docs = "@mkdocs: cd docs && mkdocs serve"
generate-docs = "@mkdocs: pw@generate-usage && cd docs && mkdocs build"
deploy-docs = "@mkdocs: cd docs && mkdocs gh-deploy"

[tool.pyprojectx.os.win.aliases]
clean = "rmdir /s/q .venv .pytest_cache dist"
clean-all = """\
pw@clean
rmdir /s/q .pyprojectx"""
